Name - Sachintha Amarasiri
UoW ID - w1714878
IIT ID - 2018051

Pseudocode

START
FUNCTION getvalue()
1.	GET  i, j
2.	 PROMPT user input size
3.	    DISPLAY square size
4.	    GET square size (n)
5.	 	    IF(n<2)
6.	 	        DISPLAY invalid message
7.	 	        CALL get value function
8.	 	    ELSE
9.	 		CREATE new 2D array
10.	 		SET count to 1
11.	 		FOR (i = 0; i < n; i++)
12.	 		         FOR (j = 0; j < n; j++)
13.	 			PROMPT user to input numbers
14.	 			DISPLAY user input numbers
15.	 		END FOR
16.	 		         END FOR
17.	                           CALL display square function
18.	 	    END IF
END FUNCTION 

FUNCTION display square
1.	 FOR (i = 0; i < n; i++)   
2.	       FOR (j = 0; j < n; j++)	
3.	  	PRINT square
4.	       END FOR
5.	CALL displayResult
END FUNCTION

FUNCTON isMagicSquare()
1.         GET i , j , sum_row,sum_col
2.         SET sum to 0 and sum_diagonal to 0
3. 		FOR  (j = 0; j < n; j++)
4.	 	      CALCULATE sum
5.	 	END FOR
6.	  	FOR (i = 1; i < n; i++)
7.	 	       SET sum_row to 0
8.	 		FOR (j=0;j<n;j++)
9.	 		        CALCULATE sum of each row
10.	 		IF sum_row not equal sum
11.	 	      	     Return false
12.	 		END IF
13.	 	END FOR
14.	 	FOR  (j = 0; j < n; j++)  
15.	 	       SET sum_col to 0
16.	 		FOR (i = 0; i < n; i++)  
17.	 		        CALCULATE sum of each column
18.	 		IF sum_col not equal to sum
19.	 		         Return false
20.	 		END IF
21.	 	END FOR
22.	  	FOR  (i = 0; i < n; i++)
23.	 	          FOR (j = 0; j < n; j++)
24.	 		IF (i==j)
25.	 		       CALCULATE sum of first diagonal
26.	 		END IF
27.	            IF sum_diagonal not equal to sum
28.	 	        Return false
29.	 	END IF
30.	  	END FOR
31.	 	FOR (i = 0; i < n; i++)
32.	 	        FOR(j = 0; j < n; j++)
33.	 		IF(i+j == n-1)
34.	 		      CALCULATE sum of second diagonal
35.	 		END IF
36.	 	IF sum_diagonal not equal to sum
37.	 	         Return false
38.	 	END IF
39.	 	END FOR
40.	 Return true
END FUNCTION

FUNCTION isLoShuSquare()
1.         GET I,j
2.	 	Create new array to store number of times number appear
3.	 	FOR (number = 1; number < 10; number++)
4.	 	         SET each frequency to 0 initial
5.	 	END FOR
6.	 	FOR (i = 0; i < n; i++)
7.	 	      FOR (j = 0; j < n; j++)
8.	 		IF check all values between 1 and 9
9.	 		        Return false
10.	 		END IF
11.	 		Increase frequency
12.	 	FOR (number = 1; number < 10; number++)
13.	 		IF check number display more than once
14.	 	      	      Return false
15.	 		END IF
16.	 	END FOR
17.	  	FOR ( i = 0; i < 3; i++)
18.	 	       SET sum sum to 0
19.	 		FOR ( j = 0; j < 3; j++)
20.	 		       CALCULATE sum
21.	 			IF sum not equal to 15
22.	 			     Return false
23.	 			END IF
24.	 		END FOR
25.	 	Return true
END FUNCTION

FUNCTION dispalayResult()
1.	PRINT ismagicsquare
2.	PRINT isloshusquare
END FUNCTION

FUNCTION main()
1.	CALL getvalue function
2.	   SET stop_programme = false
3.	 	WHILE(!stop_programme)
4.	 		PROMPT user choice
5.	 		GET user choice
6.	 	END WHILE
END FUNCTION
END



SOURCE CODE


import java.util.InputMismatchException;
import java.util.Scanner;

public class Magic_Square {

    public static void getValue() {

        int i, j; //i=index of row, j=index of column

        try {
            System.out.println("Enter square size :");
            Scanner scan = new Scanner(System.in);
            int n = scan.nextInt(); // n= user input square size

            // Check square size is more than 1
            if (n < 2) {
                System.err.println("Invalid square size please enter a square this more than 1");
                getValue();  // call get value method
            } else {
                try {
                    int[][] squareArray = new int[n][n]; // creating new 2D array

                    //Read number for each cell
                    int count =1;  //Set count to 1
                    for (i = 0; i < n; i++) {
                        for (j = 0; j < n; j++) {
                            System.out.print("Enter number " +(count++) +" - ");
                            squareArray[i][j] = scan.nextInt();
                        }
                    }
                    displaySquare(n, squareArray);
                } catch (InputMismatchException e) {
                    System.err.println("Invalid input , only enter integer");
                    getValue(); // call get value method
                }
            }
        } catch (InputMismatchException e) {
            System.err.println("Invalid input, enter integer more than 1");
            getValue();  // call get value method

        }
    }

    public static void displaySquare(int n, int[][] squareArray) {

        //Display square
        int i, j; //i=index of row, j=index of column
        System.out.println("Square : ");
        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++)
                System.out.print(squareArray[i][j] + " ");
            System.out.println();
        }
        displayResult(squareArray, n);	 // call display result method
    }


    public static boolean isMagicSquare(int[][] square, int n) {

        //Check if Magic square
        int i, j; //i=index of row, j=index of column
        int sum_row, sum_col; // declare sum of row and column
        int sum_diagonal = 0, sum = 0; //initialize sum and sum of diagonals

        //Calculate sum of the 1st row and it equal to sum
        for (j = 0; j < n; j++) {
            sum += square[0][j];
        }

        //Calculate sum of 2nd and 3rd row
        for (i = 1; i < n; i++) {
            sum_row = 0;
            for (j = 0; j < n; j++)
                sum_row += square[i][j];
            if (sum_row != sum) {
                return false;

            }
        }
        //Calculate sum of each column

        for (j = 0; j < n; j++) {
            sum_col = 0;
            for (i = 0; i < n; i++)
                sum_col += square[i][j];
            if (sum_col != sum) {
                return false;

            }
        }

        //Calculate sum of 1st diagonal

        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (i == j) {
                    sum_diagonal += square[i][j];
                }
        if (sum_diagonal != sum) {
            return false;
        }


        //Calculate sum of 2nd diagonal

        sum_diagonal = 0;
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if ((i + j) == n - 1) {
                    sum_diagonal += square[i][j];
                }
        if (sum_diagonal != sum) {
            return false;
        }
        return true;
    }

    public static boolean isLoShuSquare(int[][] square1 , int n) {

        //Check if Lo Shu square
        int number, i, j; 	//i=index of row, j=index of column, number = user input numbers

        // Create an array to store the number of times each number appears
        int[] frequency = new int[10];
        // Set each frequency to 0 initial
        for (number = 1; number < 10; number++) {
            frequency[number] = 0;
        }

        for (i = 0; i < n; i++) {
            for (j = 0; j < n; j++) {
                // Check invalid number (all values must be between 1 - 9)
                if (square1[i][j] < 1 || square1[i][j] > 9)
                    return false;

                // Increase the frequency for this number
                frequency[square1[i][j]]++;
            }
        }

    /* If any number 1 to 9 display more times or does not display exactly once
    then the square is not Lo Shu magic square.
     */
        for (number = 1; number < 10; number++) {
            if (frequency[number] != 1) {
                return false;
            }
        }

        // check sum of square equal to 15
        for ( i = 0; i < 3; i++){
            int sum = 0;
            for ( j = 0; j < 3; j++)
                sum += square1[i][j];
            if (sum != 15)
                return false;
        }
        return true;
    }

    public static void displayResult(int[][] squareArray, int n) {
        //Display result

        //magic square results
        System.out.print("Is Magic square ? : ");
        if (isMagicSquare(squareArray, n)) {
            System.out.println("True");
        } else {
            System.out.println("False");
        }

        //lo-shu square result
        System.out.print("Is Lo Shu square ? : ");
        if (isLoShuSquare(squareArray, n)) {
            System.out.println("True");
        } else {
            System.out.println("False");
        }

    }

    public static void main(String[] args) {

        getValue(); // Call get value method

        //re start programme or exit programme here
        boolean stop_programme = false;
        while (!stop_programme) {
            try {
                System.out.println("Do you wish to enter a new square ?");
                System.out.println(" 1.enter a new square \n 2.enter exit");
                Scanner scan = new Scanner(System.in);
                int choice_of_user = scan.nextInt();

                if (choice_of_user == 1) {  	//if user input 1 call get value
                    getValue();
                } else if (choice_of_user == 2) { 	// if user input 2 exit programme
                    System.out.println("Bye!!!");
                    stop_programme = true;
                } else {   	// if user input any other number ask re- enter
                    System.err.println("Please enter number 1 or 2 ");
                }

            } catch (InputMismatchException e) {
                System.err.println("Invalid input enter 1 or 2");
            }
        }
    }
}

